/* This file is part of NetBioDyn.
 *
 *   NetBioDyn is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 3 of the License, or
 *   any later version.
 *
 *   NetBioDyn is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with NetBioDyn; if not, write to the Free Software
 *   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */
 /*
 * Entite.java
 *
 * Created on 15 octobre 2007, 15:23
 */
package netbiodyn;

import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.util.ArrayList;

/**
 *
 * @author ballet
 */
public class Agent extends ProtoAgent implements Externalizable {

    private static final long serialVersionUID = 1L;    

    /**
     * Creates new form Entite
     */
    public Agent() {
        initComponents();
        //_description.setContentType("text/rtf");
        //setBounds(0-200,0-200, 134-200, 73-200);
    }

    @Override
    public Agent clone() {
        Agent agt = new Agent();
        agt.setEtiquettes(getEtiquettes());
        agt.Couleur = Couleur;
        agt._visibleDansPanel = _visibleDansPanel;
        agt.Vidable = Vidable;
        agt.DemieVie = DemieVie;
        agt._forme = _forme;
        agt._taille = _taille;
        agt.invisible=invisible;
        if (BackgroundImage != null) {
            agt._str_image_deco = _str_image_deco;
            agt.BackgroundImage=BackgroundImage;
        }
        agt.mvt_proba = mvt_proba;
        agt.mvt_gauche = mvt_gauche;
        agt.mvt_droite = mvt_droite;
        agt.mvt_haut = mvt_haut;
        agt.mvt_bas = mvt_bas;
        agt.mvt_devant = mvt_devant;
        agt.mvt_derriere = mvt_derriere;
        
        return agt;
    }

    @Override
    public ArrayList<String> toSave() {
        ArrayList<String> toSave = super.toSave();
        toSave.add(new String("\tforme:").concat(((Integer) this._forme).toString()) + "\n");
        toSave.add(new String("\ttaille:").concat(((Integer) this._taille).toString()) + "\n");

        if (BackgroundImage != null) {
            toSave.add("\tImage:" + _str_image_deco + "\n");
        }
        return toSave;
    }

    public int getTailleFenetre() {
        return _tailleFenetre;
    }

    public void setTailleFenetre(int t) {
        _tailleFenetre = t;
    }

    public double Proportion = 1;

    public transient BufferedImage BackgroundImage;

    int _tailleFenetre = 100;
    public int _taille = 0; // 0=Grande. 1=moyenne. 2=petite
    public int _forme = 1; //0=disque. 1=carre. 2=triangle. 3=losange. 4=etoile. 5=pois. 6=bruit.
    public String _str_image_deco = new String("");
    int _nbPosAngulaires = 1; // 1 pos angulaire est possible par defaut

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        out.writeUTF(getEtiquettes());
        out.writeObject(Couleur);
        out.writeBoolean(_visibleDansPanel);
        out.writeBoolean(Vidable);
        out.writeDouble(DemieVie);
        out.writeInt(_forme);
        out.writeInt(_taille);
        out.writeUTF(_str_image_deco);

        out.writeDouble(mvt_proba);
        out.writeBoolean(mvt_gauche);
        out.writeBoolean(mvt_droite);
        out.writeBoolean(mvt_haut);
        out.writeBoolean(mvt_bas);
        out.writeBoolean(mvt_devant);
        out.writeBoolean(mvt_derriere);
        
    }

    @Override
    public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {
        
        setEtiquettes(in.readUTF());
        Couleur=(Color)in.readObject();
        _visibleDansPanel=in.readBoolean();
        Vidable=in.readBoolean();
        DemieVie=in.readDouble();
        _forme=in.readInt();
        _taille=in.readInt();        
        _str_image_deco=in.readUTF();
        invisible=false;
        
        // Depuis la version 2018
        mvt_proba = in.readDouble();
        mvt_gauche = in.readBoolean();
        mvt_droite = in.readBoolean();
        mvt_haut = in.readBoolean();
        mvt_bas = in.readBoolean();
        mvt_devant = in.readBoolean();
        mvt_derriere = in.readBoolean();
    }

}
